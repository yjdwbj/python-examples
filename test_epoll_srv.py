#coding=utf-8
#import epoll_srv
import struct
import binascii
import uuid
import unittest

from sockbasic import *

class dumpclass:
    pass

class TestEpollSrv(unittest.TestCase):
    def setUp(self):
        pass
    def tearDown(self):
        pass

#    def gen_uuid(self):
#        u = ''.join([str(uuid.uuid4()).replace('-',''),binascii.hexlify('test')])
#        return ''.join([u,epoll_srv.get_jluuid_crc32(u)])
#
#    def test_gen_ten_jluuid(self):
#        tn = ''
#        n = 0
#        while n < 10:
#            tn = ''.join([tn,self.gen_uuid()])
#            n +=1
#        return tn
#
#    def test_handle_allocate_request(self):
#        return
#        res = dumpclass()
#        res.method=STUN_METHOD_ALLOCATE
#        res.fileno=5
#        res.attrs={}
#        res.attrs[STUN_ATTRIBUTE_UUID] = (STUN_ATTRIBUTE_UUID,24,binascii.unhexlify(self.gen_uuid()))
#        rbuf = epoll_srv.handle_allocate_request(res)
#        self.assertTrue(rbuf)
#
#
#    def test_handle_bind_device(self):
#        res = dumpclass()
#        res.method=STUN_METHOD_CHANNEL_BIND
#        res.fileno=5
#        muuid = self.test_gen_ten_jluuid()
#        res.attrs={}
#        res.attrs[STUN_ATTRIBUTE_MUUID] = (STUN_ATTRIBUTE_MUUID,24*10,binascii.unhexlify(muuid))
#        rbuf = epoll_srv.handle_app_bind_device(res)
#        self.assertTrue(rbuf)
#
#
#    def test_split_uuid(self):
#        muuid = self.test_gen_ten_jluuid()
#        self.assertEqual(len(muuid),(48 * 10))
#        mlist = epoll_srv.split_muuid(muuid)
#        self.assertEqual(len(mlist),10)
#        p = [epoll_srv.check_jluuid(n) for n in mlist]
#        self.assertEqual([x for x in p if x] ,[])
#        [epoll_srv.bind_each_uuid(n,5) for n in mlist]
#        assert epoll_srv.gClass.appbinds[5]
#        print epoll_srv.gClass.appbinds[5]
#
#    def test_check_packet_vaild(self):
#        buf='4a4c00300000000000000000000000030000000080010018373163cda13c4ca9b9e07ac9bb26d58074657374e1494701000d0004000000a0001300087465737464617461a1c7c346'
#        res = epoll_srv.check_packet_vaild(buf)
#        self.assertEqual(res,0)
#        self.assertFalse(res)

    def test_stun_buf_to_list(self):
        buf="00060030353062303139623263326338343662343966306363323531643464323339643430303030303030303132383835343734000800203f0acccc2ebf8f8f955224c55306ed51a7d6040ec154dc92c59db4105761be58"
        m1 = "4a4c0001002c00001a9200001a7c00070300001d00130010313432393538363132312e353139323609944a2d4a4c0001002c00001a9200001a7c00070300001d00130010313432393538363135362e36333731337a8645a74a4c0001002c00001a9200001a7c00070300001d00130010313432393538363135362e3639373736330bf6ca4a4c0001002c00001a9200001a7c00070300001d00130010313432393538363135362e36393738352d9abbbf4a4c0001002c00001a9200001a7c00070300001d00130010313432393538363135362e36393739344386ba684a4c0001002c00001a9200001a7c00070300001d00130010313432393538363135362e3639383031e972b2934a4c0001002c00001a9200001a7c00070300001d00130010313432393538363135362e3639383037001117a64a4c0001002c00001a9200001a7c00070300001d00130010313432393538363135362e36393831331e67e2fe4a4c0001002c00001a9200001a7c00070300001d00130010313432393538363135362e363938313889b53b764a4c0001002c00001a9200001a7c00070300001d00130010313432393538363135362e3639383234ab2e249e4a4c0001002c00001a9200001a7c00070300001d00130010313432393538363135362e3639383330b558d1c64a4c0001002c00001a9200001a7c00070300001d00130010313432393538363135362e3639383335c53225494a4c0001002c00001a9200001a7c00070300001d00130010313432393538363135362e36393834318d1e77974a4c0001002c00001a9200001a7c00070300001d00130010313432393538363135362e3639383437647dd2a24a4c0001002c00001a9200001a7c00070200001d00130010313432393538363135362e36393835328c29724b4a4c0001002c00001a9200001a7c00070300001e00130010313432393538363135362e363938353896c77c914a4c0001002c00001a9200001a7c00070300001e00130010313432393538363135362e36393836332a38f6da4a4c0001002c00001a9200001a7c00070300001e00130010313432393538363135362e3639383639caed1fc44a4c0001002c00001a9200001a7c00070300001e00130010313432393538363135362e3639383735da4062ae4a4c0001002c00001a9200001a7c00070300001e00130010313432393538363135362e36393838302db28aee4a4c0001002c00001a9200001a7c00070300001e00130010313432393538363135362e3639383836c4d12fdb4a4c0001002c00001a9200001a7c00070300001e00130010313432393538363135362e363938393143ae8b394a4c0001002c00001a9200001a7c00070300001e00130010313432393538363135362e3639383937aacd2e0c4a4c0001002c00001a9200001a7c00070300001e00130010313432393538363135362e36393930320aa70bfd4a4c0001002c00001a9200001a7c00070300001e00130010313432393538363135362e3639393038ea72e2e34a4c0001002c00001a9200001a7c00070300001e00130010313432393538363135362e3639393134fadf9f894a4c0001002c00001a9200001a7c00070300001e00130010313432393538363135362e3639393139846ee3344a4c0001002c00001a9200001a7c00070300001e00130010313432393538363135362e3639393234d1f2cc4a4a4c0001002c00001a9200001a7c00070300001e00130010313432393538363135362e3639393330cf8439124a4c0001002c00001a9200001a7c00070300001e00130010313432393538363135362e363939333626e79c27"
        buf="4a4c0001057b00000662000702006bd300130010313433303732303435392e31353930348a9dfa64"
        parser_stun_package(



if __name__ == '__main__':
    unittest.main()
